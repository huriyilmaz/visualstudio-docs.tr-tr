### YamlMime:FAQ
metadata:
  title: Live Unit Testing SSS
  description: Desteklenen çerçeveler, yapılandırma ve özelleştirme dahil olmak üzere sık sorulan Live Unit Testing soruları gözden geçirin.
  ms.custom: SEO-VS-2020
  ms.date: 10/03/2017
  ms.topic: conceptual
  helpviewer_keywords:
  - Live Unit Testing FAQ
  author: mikejo5000
  ms.author: mikejo
  ms.workload:
  - dotnet
  ms.openlocfilehash: 210885daff9f670910299e6cbefc174ca37a8847
  ms.sourcegitcommit: 42aec4a2ea6dec67dbe4c93bcf0fa1116a4b93d9
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 08/26/2021
  ms.locfileid: "122980897"
title: Live Unit Testing sık sorulan sorular
summary: ''
sections:
- name: Desteklenen çerçeveler
  questions:
  - question: >
      Hangi test çerçeveleri Live Unit Testing destekler ve desteklenen en düşük sürüm nedir?
    answer: >
      Live Unit Testing, aşağıdaki tabloda listelenen üç popüler birim testi çerçevesi ile birlikte kullanılabilir. Bağdaştırıcıların ve çerçevelerinin desteklenen minimum sürümü tabloda de listelenmiştir. birim test çerçevelerinin hepsi NuGet. org öğesinden kullanılabilir.


      |Test çerçevesi  |Visual Studio Bağdaştırıcının en düşük sürümü  |Framework minimum sürümü  |

      |---------|---------|---------|

      |xUnit.net |xUnit. Runner. VisualStudio sürüm 2.2.0-Beta3-build1187 |xUnit 1.9.2 |

      |NUnit |NUnit3TestAdapter sürümü 3.7.0 |NUnit sürümü 3.5.0 |

      |MSTest |MSTest. TestAdapter 1.1.4-Önizleme |MSTest. TestFramework 1.0.5-Önizleme |


      başvuruda bulunan `Microsoft.VisualStudio.QualityTools.UnitTestFramework` ve daha yeni mstest NuGet paketlerine geçmek istemiyorsanız daha önce mstest tabanlı test projelerine sahipseniz, Visual Studio 2019 veya Visual Studio 2017 ' e yükseltin.


      bazı durumlarda, Live Unit Testing çalışabilmesi için çözümdeki projelerin başvurduğu NuGet paketlerini açıkça geri yüklemeniz gerekebilir. çözümün açık bir derlemesini gerçekleştirerek (   >  en üst düzey Visual Studio menüsünden derleme **yeniden oluşturma çözümünü** seçin) ya da bu çözüme sağ tıklayıp ve ardından, bilgisayarlarda sağ tıklayıp ve sonra da **NuGet paketlerini geri yükle** ' yi seçerek paketleri geri yükleyebilirsiniz.
- name: .NET Core desteği
  questions:
  - question: >
      Live Unit Testing .NET Core ile çalışıyor mu?
    answer: >
      Evet. Live Unit Testing .NET Core ve .NET Framework ile birlikte kullanılabilir.
- name: Yapılandırma
  questions:
  - question: >
      Bu öğeyi kapatdığımda neden Live Unit Testing çalışmıyor?
    answer: >
      Çıkış penceresi (Live Unit Testing açılan pencere seçildiğinde) Live Unit Testing neden çalışmadığını anlamalıdır. Aşağıdaki nedenlerden biri için Live Unit Testing çalışmayabilir:


      - çözümdeki projeler tarafından başvurulan NuGet paketleri geri yüklenmamışsa, Live Unit Testing çalışmaz. çözümün açık bir derlemesini yapmak veya Live Unit Testing açılmadan önce çözümdeki NuGet paketlerini geri yüklemek bu sorunu çözmelidir.


      - projelerinizde MSTest tabanlı testler kullanıyorsanız, başvurusunu kaldırdığınızdan `Microsoft.VisualStudio.QualityTools.UnitTestFramework` ve en son MSTest NuGet paketlerine başvurular eklediğinizden emin olun `MSTest.TestAdapter` (en düşük bir 1.1.11 sürümü gereklidir) ve `MSTest.TestFramework` (en düşük sürüm 1.1.11 gereklidir). daha fazla bilgi için [Visual Studio makalesinde Live Unit Testing kullanımı](live-unit-testing.md#supported-test-frameworks) ' nın "desteklenen test çerçeveleri" bölümüne bakın.


      - çözümünüzde en az bir proje, xunit, nunit veya MSTest test çerçevesine bir NuGet başvuruya ya da doğrudan başvuruya sahip olmalıdır. bu proje ayrıca karşılık gelen bir Visual Studio test bağdaştırıcıları NuGet paketine başvurmalıdır. Visual Studio test bağdaştırıcısına bir *. runsettings* dosyası aracılığıyla da başvurulabilir. *. Runsettings* dosyası aşağıdaki örnekteki gibi bir girdiye sahip olmalıdır:


      ```xml

      <RunSettings>
          <RunConfiguration>
                <TestAdaptersPaths>path-to-your-test-adapter</TestAdaptersPaths>
           </RunConfiguration>
      </RunSettings>

      ```
- name: Yükseltmeden sonra yanlış kapsam
  questions:
  - question: >
      Visual Studio projelerinizde başvurulan test bağdaştırıcısını desteklenen sürüme yükselttikten sonra neden Live Unit Testing yanlış kapsamı gösteriyor?
    answer: >
      - çözümdeki birden çok proje NuGet test bağdaştırıcısı paketine başvuruda bulunursa, her birinin desteklenen sürüme yükseltilmesi gerekir.


      - test bağdaştırıcısı paketinden içeri aktarılan MSBuild *. props* dosyasının da doğru şekilde güncelleştirildiğinden emin olun. genellikle proje dosyasının en üstünde bulunan, aşağıdaki gibi, bir içeri aktarmanın NuGet paket sürümünü/yolunu denetleyin:

         ```xml
          <Import Project="..\packages\xunit.runner.visualstudio.2.2.0\build\net20\xunit.runner.visualstudio.props" Condition="Exists('..\packages\xunit.runner.visualstudio.2.2.0\build\net20\xunit.runner.visualstudio.props')" />
         ```
- name: Derlemeleri Özelleştir
  questions:
  - question: >
      Live Unit Testing Derlemelerimi özelleştirebilir miyim?
    answer: >
      Çözümünüz, "normal" işaretlenmiş olmayan derleme için gerekli olmayan izleme (Live Unit Testing) için derleme için özel adımlar gerektiriyorsa, projenize veya *. targets* dosyalarına `BuildingForLiveUnitTesting` özelliği denetleyen ve özel ön/sonrası oluşturma adımları gerçekleştiren bir kod ekleyebilirsiniz. Ayrıca, belirli derleme adımlarını (paket yayımlama veya oluşturma gibi) ya da bu proje özelliğine dayalı Live Unit Testing bir yapıya derleme adımları (örneğin, önkoşulları kopyalama) eklemeyi seçebilirsiniz. Bu özelliğe göre yapınızı özelleştirmek, normal derlemenizi herhangi bir şekilde değiştirmez ve yalnızca Live Unit Testing yapıları etkiler.


      örneğin, düzenli bir derleme sırasında NuGet paketleri üreten bir hedef olabilir. yaptığınız her düzenlemeden sonra NuGet paketlerin oluşturulmasını istemezsiniz. Bu nedenle, aşağıdaki gibi bir şey yaparak Live Unit Testing derlemesinde bu hedefi devre dışı bırakabilirsiniz:  


      ```xml

      <Target Name="GenerateNuGetPackages" BeforeTargets="AfterBuild" Condition="'$(BuildingForLiveUnitTesting)' != 'true'">
          <Exec Command='"$(MSBuildThisFileDirectory)..\tools\GenPac" '/>
      </Target>

      ```
- name: Veya içeren hata <OutputPath> iletileri <OutDir><IntermediateOutputPath>
  questions:
  - question: >
      Live Unit Testing çözümümüzü derlemeyi denediğinde neden aşağıdaki hatayı alıyorum: "... koşulsuz olarak ayarlanan veya olarak `<OutputPath>` görünür `<OutDir>` . Live Unit Testing, çıkış derlemesinden testleri yürütmez "?
    answer: >
      Çözümünüz için derleme işleminin ikili dosyaların nerede oluşturulacağını belirten özel bir mantığı varsa, bu hatayı alabilirsiniz. Varsayılan olarak, ikili ağınızın konumu, veya veya ile değişir `<OutputPath>` `<OutDir>` `<IntermediateOutputPath>` `<BaseOutputPath>` `<BaseIntermediateOutputPath>` .


      Live Unit Testing, derleme yapıtlarının bir Live Unit Testing yapıt klasörüne bırakılması ve derleme işleminiz bu değişkenleri geçersiz kılıyorsa başarısız olacağı için bu değişkenleri geçersiz kılar.


      Live Unit Testing derlemeyi başarıyla oluşturmak için iki ana yaklaşım vardır. Daha kolay derleme yapılandırması için çıkış yollarınızın üzerine temelleyebilirsiniz `<BaseIntermediateOutputPath>` . Daha karmaşık yapılandırmalarda çıkış yollarınızı temel alabilirsiniz `<LiveUnitTestingBuildRootPath>` .
  - question: >
      `<OutputPath>` / `<IntermediateOutputPath>` Koşullu olarak geçersiz kılma `<BaseOutputPath>` /  `<BaseIntermediateOutputPath>` .
    answer: >
      > [!NOTE]

      > Bu yaklaşımı kullanmak için, her projenin birbirinden bağımsız olarak derlenebilir olması gerekir. Derleme sırasında başka bir projeden bir proje başvuru yapıtlarına sahip değilsiniz. Çalışma zamanı (örneğin, çağrı) sırasında başka bir projeden dinamik olarak derleme yükleme `Assembly.Loadfile("..\..\Project2\Release\Project2.dll")` .


      Yapı sırasında, Live Unit Testing `<BaseOutputPath>` / `<BaseIntermediateOutputPath>` Live Unit Testing yapıtlar klasörünü hedeflemek için değişkenleri otomatik olarak geçersiz kılar.


      Örneğin, derlemeniz `<OutputPath>` aşağıda gösterildiği gibi geçersiz kılar:


      ```xml

      <Project>
        <PropertyGroup>
          <OutputPath>$(SolutionDir)Artifacts\$(Configuration)\bin\$(MSBuildProjectName)</OutputPath>
        </PropertyGroup>
      </Project>

      ```


      ardından, aşağıdaki XML ile değiştirebilirsiniz:


      ```xml

      <Project>
        <PropertyGroup>
          <BaseOutputPath Condition="'$(BaseOutputPath)' == ''">$(SolutionDir)Artifacts\$(Configuration)\bin\$(MSBuildProjectName)\</BaseOutputPath>
          <OutputPath Condition="'$(OutputPath)' == ''">$(BaseOutputPath)</OutputPath>
        </PropertyGroup>
      </Project>

      ```


      Bu `<OutputPath>` , klasörün içinde olmasını sağlar `<BaseOutputPath>` .


      `<OutDir>`Doğrudan derleme sürecinizdeki üzerine vermeyin; `<OutputPath>` derleme yapıtlarını belirli bir konuma bırakmak yerine geçersiz kılın.
  - question: >
      Özelliği temel alarak özelliklerinizi geçersiz kılma `<LiveUnitTestingBuildRootPath>` .
    answer: >
      > [!NOTE]

      > Bu yaklaşımda, derleme sırasında oluşturulmayan yapıt klasörü altına eklenen dosyalar konusunda dikkatli olmanız gerekir. Aşağıdaki örnekte, paketler klasörü yapıtlar altına yerleştirilirken ne yapabileceğiniz gösterilmektedir. bu klasörün içeriği derleme sırasında oluşturulmadığından, MSBuild özelliği **değiştirilmemelidir**.


      Live Unit Testing yapı sırasında, `<LiveUnitTestingBuildRootPath>` özelliği Live Unit Testing yapıtlar klasörünün konumuna ayarlanır.


      Örneğin, projenizin burada gösterilen yapıya sahip olduğunu varsayalım.


      ```

      .vs\...\lut\0\b

      artifacts\{binlog,obj,bin,nupkg,testresults,packages}

      src\{proj1,proj2,proj3}

      tests\{testproj1,testproj2}

      Solution.sln

      ```

      Live Unit Testing yapı sırasında, `<LiveUnitTestingBuildRootPath>` özelliği öğesinin tam yolu olarak ayarlanır `.vs\...\lut\0\b` . proje, `<ArtifactsRoot>` çözüm dizini ile eşleşen özelliği tanımlıyorsa, MSBuild projesini aşağıdaki şekilde güncelleştirebilirsiniz:


      ```xml

      <Project>
          <PropertyGroup Condition="'$(LiveUnitTestingBuildRootPath)' == ''">
              <SolutionDir>$([MSBuild]::GetDirectoryNameOfFileAbove(`$(MSBuildProjectDirectory)`, `YOUR_SOLUTION_NAME.sln`))\</SolutionDir>

              <ArtifactsRoot>Artifacts\</ArtifactsRoot>
              <ArtifactsRoot Condition="'$(LiveUnitTestingBuildRootPath)' != ''">$(LiveUnitTestingBuildRootPath)</ArtifactsRoot>
          </PropertyGroup>

          <PropertyGroup>
              <BinLogPath>$(ArtifactsRoot)\BinLog</BinLogPath>
              <ObjPath>$(ArtifactsRoot)\Obj</ObjPath>
              <BinPath>$(ArtifactsRoot)\Bin</BinPath>
              <NupkgPath>$(ArtifactsRoot)\Nupkg</NupkgPath>
              <TestResultsPath>$(ArtifactsRoot)\TestResults</TestResultsPath>

              <!-- Note: Given that a build doesn't generate packages, the path should be relative to the solution dir, rather than artifacts root, which will change during a Live Unit Testing build. -->
              <PackagesPath>$(SolutionDir)\artifacts\packages</PackagesPath>
          </PropertyGroup>
      </Project>

      ```
- name: Yapı yapıt konumu
  questions:
  - question: >
      Live Unit Testing derleme yapıtlarının,. vs klasörü altındaki varsayılan konum yerine belirli bir konuma gitmesini istiyorum. Bunu nasıl değiştirebilirim?
    answer: >
      `LiveUnitTesting_BuildRoot`Kullanıcı düzeyi ortam değişkenini Live Unit Testing derleme yapıtlarının kesilmesini istediğiniz yola ayarlayın. 
- name: Test Gezgini Live Unit Testing karşı
  questions:
  - question: >
      Test Gezgini penceresinden testlerin Live Unit Testing testlerin çalıştırılmasının farkı nasıl çalışır?
    answer: >
      Çeşitli farklılıklar vardır:


      - **Test Gezgini** penceresinde testleri çalıştırmak veya hata ayıklamak, düzenli ikili dosyalar çalıştırlarken Live Unit Testing, işaretlenmiş ikililer çalıştırır. Araçlı ikililerin hata ayıklaması yapmak istiyorsanız, [hata ayıklayıcı ekleme.](xref:System.Diagnostics.Debugger.Launch)   Test yönteinizde başlatma yöntemi çağrısı, bu yöntem yürütüldüğünde hata ayıklayıcının başlatılmasına neden olur (Live Unit Testing tarafından yürütüldüğünde dahil) ve ardından, izlenen ikiliyi iliştirebilir ve hata ayıklaması yapabilirsiniz. Bununla birlikte, umuyoruz çoğu kullanıcı senaryosunda sizin için şeffaf ve işaretlenmiş ikililerin hata ayıklamanıza gerek kalmaz.


      - Live Unit Testing testleri çalıştırmak için yeni bir uygulama etki alanı oluşturmaz, ancak **Test Gezgini** penceresinden çalıştırılan testler yeni bir uygulama etki alanı oluşturur.


      - Live Unit Testing her bir test derlemesindeki testleri sırayla çalıştırır. **Test Gezgini**'nde, paralel olarak birden çok test çalıştırmayı seçebilirsiniz.


      - **Test Gezgini** , testleri tek iş parçacıklı bir grupta (STA) çalıştırır. Live Unit Testing, testleri çok iş parçacıklı bir grupta (MTA) çalıştırır. Live Unit Testing içinde STA 'da MSTest testlerini çalıştırmak için, test yöntemini veya içeren sınıfı, `<STATestMethod>` `<STATestClass>` NuGet paketinde bulunan veya özniteliğiyle süsle birlikte kullanabilirsiniz `MSTest.STAExtensions 1.0.3-beta` . NUnit için, özniteliğiyle birlikte test yöntemini `<RequiresThread(ApartmentState.STA)>` ve xUnit için özniteliği ile süslemek için `<STAFact>` .
- name: Testleri hariç tut
  questions:
  - question: >
      Nasıl yaparım? testlerin Live Unit Testing katılmasını hariç tutsın mı?
    answer: >
      kullanıcıya özgü ayar için [Visual Studio makalesinde Live Unit Testing kullanma](live-unit-testing.md#include-and-exclude-test-projects-and-test-methods) konusunun "test projelerini ve test yöntemlerini ekleme ve dışlama" bölümüne bakın. Belirli bir düzenleme oturumu için belirli bir test kümesini çalıştırmak veya kendi kişisel tercihlerinizi sürdürmek istediğinizde, testlerin dahil edilmesi veya dışlanması yararlı olur.


      Çözüme özgü ayarlar için, <xref:System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute?displayProperty=fullName> metodu, özellikleri, sınıfları veya yapıları Live Unit Testing tarafından işaretlenmiş olarak hariç tutmak için programlı olarak özniteliği uygulayabilirsiniz. Ayrıca, projenin `<ExcludeFromCodeCoverage>` `true` tamamını işaretlenmiş olarak hariç tutmak için özelliği proje dosyanızda olarak ayarlayabilirsiniz. Live Unit Testing, yine de göstergeye sahip olan testleri çalıştıracak ancak kapsamları görselleştirilemayacak.


      Ayrıca geçerli uygulama etki alanında `Microsoft.CodeAnalysis.LiveUnitTesting.Runtime` yüklü olup olmadığını kontrol edip nedene bağlı olarak testleri devre dışı abilirsiniz. Örneğin, xUnit ile aşağıdakine benzer bir şey yapabilirsiniz:


      ```csharp

      [ExcludeFromCodeCoverage]

      public class SkipLiveFactAttribute : FactAttribute

      {
         private static bool s_lutRuntimeLoaded = AppDomain.CurrentDomain.GetAssemblies().Any(a => a.GetName().Name ==
                                                  "Microsoft.CodeAnalysis.LiveUnitTesting.Runtime");
         public override string Skip => s_lutRuntimeLoaded ? "Test excluded from Live Unit Testing" : "";
      }


      public class Class1

      {
         [SkipLiveFact]
         public void F()
         {
            Assert.True(true);
         }
      }

      ```
- name: Sürekli derlemeler
  questions:
  - question: >
      Düzenleme yapmamama rağmen Canlı Birim testi neden sürekli çözüm derleyeme devam ediyor?
    answer: >
      Derleme işlemi çözümün kendi parçası olan kaynak kodu oluştursa ve derleme hedef dosyalarında uygun giriş ve çıkışlar belirtilmemişse bile çözümünüz derlemenize yardımcı olabilir. Hedeflere girişlerin ve çıkışların bir listesi ver gerekir, böylece MSBuild güncel denetimleri gerçekleştirip yeni bir derleme gerekip gerek olmadığını belirleyene kadar bu hedeflere sahip olun.


      Live Unit Testing dosyaların değiştiğini algılayan her derlemeyi başlatır. Çözüm derlemesi kaynak dosyaları oluştura olduğundan, Live Unit Testing sonsuz derleme döngüsüne girebilirsiniz. Ancak, Live Unit Testing ikinci derlemeyi başlatırken (önceki derlemeden yeni oluşturulan kaynak dosyalar algılandıktan sonra) hedefin girişleri ve çıkışları denetlenirse, giriş ve çıkış denetimleri her şeyin güncel olduğunu işaret eder çünkü derleme döngüsünden çıkar.
- name: Düzenleyici simgeleri
  questions:
  - question: >
      Çıkış penceresindeki iletilere göre testleri çalıştırmış Live Unit Testing neden düzenleyicide herhangi bir simge göremiyorum?
    answer: >
      Üzerinde çalışan derlemeler herhangi bir nedenle Live Unit Testing düzenleyicide simge görmeyebilirsiniz. Örneğin, Live Unit Testing ayara sahip projelerle uyumlu `<UseHostCompilerIfAvailable>false</UseHostCompilerIfAvailable>` değildir. Bu durumda, derleme işleminizin bu ayarı kaldıracak şekilde güncelleştirilmiş olması veya bu ayarın çalışması `true` için Live Unit Testing gerekir. 
- name: Günlükleri yakalama
  questions:
  - question: >
      Nasıl yaparım? raporlarına daha ayrıntılı günlükler mi toplayabilirsiniz?
    answer: >
      Daha ayrıntılı günlükler toplamak için birkaç şey yapabiliriz:


      - Araçlar **Seçenekler'e**  >    >  **Live Unit Testing** ve günlüğe kaydetme seçeneğini Ayrıntılı **olarak ayarlayın.** Ayrıntılı günlük kaydı, Çıkış penceresinde daha ayrıntılı günlükler gösterilmeye **neden** olur.


      - Kullanıcı `LiveUnitTesting_BuildLog` ortamı değişkenlerini günlük kaydına yakalamak için kullanmak istediğiniz dosyanın adına MSBuild ayarlayın. Derleme MSBuild ayrıntılı günlük Live Unit Testing bu dosyadan alabilirsiniz.


      - Test Platformu `LiveUnitTesting_TestPlatformLog` günlüğünü yakalamak için kullanıcı ortam `1` değişkenini olarak ayarlayın. Daha sonra, Live Unit Testing ayrıntılı Test Platformu günlük iletileri'den `[Solution Root]\.vs\[Solution Name]\log\[VisualStudio Process ID]` alınabilirsiniz.


      - adlı kullanıcı düzeyinde bir ortam değişkeni oluşturun ve 1 (veya herhangi bir değer) olarak ayarlayın ve bu değişkeni `VS_UTE_DIAGNOSTICS` Visual Studio. Şimdi çıkışta çıkış - testler sekmesinde **çok fazla** günlük kaydı Visual Studio.
additionalContent: "\n## <a name=\"see-also\"></a>Ayrıca bkz.\n   - [Live Unit Testing](live-unit-testing.md)"
