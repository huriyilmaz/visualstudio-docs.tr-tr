### YamlMime:FAQ
metadata:
  title: Live Unit Testing SSS
  description: Bu Live Unit Testing çerçeveler, yapılandırma ve özelleştirme gibi sık sorulan soruları gözden geçirebilirsiniz.
  ms.custom: SEO-VS-2020
  ms.date: 10/03/2017
  ms.topic: conceptual
  helpviewer_keywords:
  - Live Unit Testing FAQ
  author: mikejo5000
  ms.author: mikejo
  ms.workload:
  - dotnet
  ms.openlocfilehash: 6521f14adb5da17191fc974ba3cf45f0edc2ca57fdfb83c3e54fe3be4d1d3138
  ms.sourcegitcommit: c72b2f603e1eb3a4157f00926df2e263831ea472
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 08/12/2021
  ms.locfileid: "121268565"
title: Live Unit Testing sorulan sorular
summary: ''
sections:
- name: Desteklenen çerçeveler
  questions:
  - question: >
      Desteklenen test çerçeveleri Live Unit Testing desteklenen en düşük sürümler hangileridir?
    answer: "Live Unit Testing, aşağıdaki tabloda listelenen üç popüler birim testi çerçevesiyle birlikte çalışır. Bağdaştırıcılarının ve çerçevelerinin desteklenen en düşük sürümü tabloda da listelenmiştir. Birim testi çerçeveleri NuGet.org adresinden edinebilirsiniz.\n\n|Test Çerçevesi  |Visual Studio Bağdaştırıcı en düşük sürümü  |Çerçeve en düşük sürümü  |\n|---------|---------|---------|\n|xUnit.net |xunit.runner.visualstudio sürüm 2.2.0-beta3-build1187 |xunit 1.9.2 |\n|NUnit |NUnit3TestAdapter sürüm 3.7.0 |NUnit sürüm 3.5.0 |\n|MSTest |MSTest.TestAdapter 1.1.4-preview |MSTest.TestFramework 1.0.5-preview |\n\nBaşvurulan eski MSTest tabanlı test projeleriniz varsa ve daha yeni MSTest NuGet paketlerine taşımak `Microsoft.VisualStudio.QualityTools.UnitTestFramework` yoksa, Visual Studio 2019 veya 2017'ye Visual Studio yükseltin.\n\nBazı durumlarda, çözümün çalışması için NuGet projeler tarafından başvurulan Live Unit Testing geri yüklemeniz gerekir. Çözümün açık bir derlemesini yaparak (üst düzey Visual Studio menüsünden Çözümü Yeniden Derleme'yi seçin) veya çözüme sağ tıklar ve Living Unit Testing'i etkinleştirmeden önce NuGet Paketlerini Geri Yükle'yi seçerek paketleri geri  >   yükleyebilirsiniz. \n"
- name: .NET Core desteği
  questions:
  - question: >
      .NET Core Live Unit Testing çalışıyor mu?
    answer: >
      Evet. Live Unit Testing . NET Core ve .NET Framework.
- name: Yapılandırma
  questions:
  - question: >
      Neden Live Unit Testing çalışmıyor?
    answer: >
      Çıkış penceresi (Live Unit Testing açılan liste seçildiğinde) size neden çalışma Live Unit Testing gerektiğini söylemeli. Live Unit Testing aşağıdaki nedenlerden biri nedeniyle çalışmayabiliyor:


      - Çözümdeki NuGet tarafından başvurulan paketler geri yüklenirse, Live Unit Testing çalışmaz. Çözümün açık bir derlemesini yapmak veya NuGet açmadan önce çözümde Live Unit Testing paketleri geri yüklemek bu sorunu çözecek.


      - Projeleriniz içinde MSTest tabanlı testler kullanıyorsanız, başvurularını kaldırarak en son MSTest NuGet paketlerine başvurular ekleyebiliyorsanız (en düşük `Microsoft.VisualStudio.QualityTools.UnitTestFramework` `MSTest.TestAdapter` sürüm 1.1.11 gereklidir) ve (en düşük sürüm `MSTest.TestFramework` 1.1.11 gereklidir). Daha fazla bilgi için, Visual Studio'da kullanım çerçevesi kullanma makalesinde "Desteklenen test [Live Unit Testing" Visual Studio](live-unit-testing.md#supported-test-frameworks) bakın.


      - Çözümünüzdeki en az bir projenin xUnit, NUnit veya MSTest test çerçevesine NuGet veya doğrudan başvurusu olması gerekir. Bu proje ayrıca pakete karşılık gelen bir Visual Studio test bağdaştırıcılarına NuGet gerekir. Test Visual Studio bir *.runsettings* dosyası aracılığıyla da başvurulabilirsiniz. *.runsettings dosyasının* aşağıdaki örnekte olduğu gibi bir girdisi olması gerekir:


      ```xml

      <RunSettings>
          <RunConfiguration>
                <TestAdaptersPaths>path-to-your-test-adapter</TestAdaptersPaths>
           </RunConfiguration>
      </RunSettings>

      ```
- name: Yükseltmeden sonra yanlış kapsam
  questions:
  - question: >
      Live Unit Testing Projelerinde başvurulan test bağdaştırıcısını desteklenen sürüme Visual Studio neden yanlış kapsam gösteriyor?
    answer: >
      - Çözümdeki birden çok proje, NuGet test bağdaştırıcısı paketine başvurursa, bunların her biri desteklenen sürüme yükseltilsin.


      - Test bağdaştırıcısı MSBuild *içe aktarılan .props* dosyasının da doğru şekilde güncelleştirilmiş olduğundan emin olun. İçeri NuGet paketi sürümünü/yolunu kontrol edin. Bu sürüm genellikle aşağıdaki gibi proje dosyasının üst kısmında bulunabilir:

         ```xml
          <Import Project="..\packages\xunit.runner.visualstudio.2.2.0\build\net20\xunit.runner.visualstudio.props" Condition="Exists('..\packages\xunit.runner.visualstudio.2.2.0\build\net20\xunit.runner.visualstudio.props')" />
         ```
- name: Derlemeleri özelleştirme
  questions:
  - question: >
      Derlemelerimi özel Live Unit Testing miyim?
    answer: >
      Çözümünüz , "normal" olarak irdeilmeyen derleme için gerekli olmayan ölçümlü (Live Unit Testing) için derlemek için özel adımlar gerektiriyorsa, projenize kod ekleyebilir veya özelliği kontrol etmek ve özel derleme öncesi/sonrası adımları gerçekleştiren *.targets* dosyalarına kod `BuildingForLiveUnitTesting` abilirsiniz. Ayrıca belirli derleme adımlarını (yayımlama veya paket oluşturma gibi) kaldırmayı veya derleme adımlarını (önkoşulları kopyalama gibi) bu proje özelliğine Live Unit Testing bir derlemeye eklemeyi de seçebilirsiniz. Derlemenizi bu özelliği temel alarak özelleştirmek normal derlemenizi herhangi bir şekilde değiştirmez ve yalnızca derlemeleri Live Unit Testing etkiler.


      Örneğin, normal bir derleme sırasında NuGet bir hedef olabilir. Büyük olasılıkla, NuGet her düzenlemeden sonra yeni paketlerin oluşturularak oluşturulmalarını istemeyebilirsiniz. Bu nedenle, aşağıdakine benzer bir Live Unit Testing bu hedefi derlemede devre dışı siniz:  


      ```xml

      <Target Name="GenerateNuGetPackages" BeforeTargets="AfterBuild" Condition="'$(BuildingForLiveUnitTesting)' != 'true'">
          <Exec Command='"$(MSBuildThisFileDirectory)..\tools\GenPac" '/>
      </Target>

      ```
- name: ', veya ile <OutputPath> hata <OutDir> iletileri <IntermediateOutputPath>'
  questions:
  - question: >
      Çözümüm derlemeye çalışırken neden Live Unit Testing hata alıyorum: "... , veya koşulsuz olarak ayarlanmış gibi `<OutputPath>` `<OutDir>` görünür. Live Unit Testing derlemeden test yürütmez" mi?
    answer: >
      Çözümünüz için derleme işlemi ikililerin nerede oluşturulacaklarını belirten özel mantığa sahipse bu hatayı alabilirsiniz. Varsayılan olarak ikili değerlerinizi konumunuz , `<OutputPath>` veya `<OutDir>` veya `<IntermediateOutputPath>` değerine `<BaseOutputPath>` `<BaseIntermediateOutputPath>` bağlıdır.


      Live Unit Testing yapıtların bir Live Unit Testing yapıtlar klasörüne bırakıldıklarını ve derleme işleminiz de bu değişkenleri geçersiz kıyorsa başarısız olduğundan emin olmak için bu değişkenleri geçersiz kılar.


      Derlemeyi başarıyla oluşturmak için iki Live Unit Testing yaklaşım vardır. Daha kolay derleme yapılandırmaları için çıkış yollarınızı temel olarak `<BaseIntermediateOutputPath>` ebilirsiniz. Daha karmaşık yapılandırmalar için çıkış yollarınızı temel olarak `<LiveUnitTestingBuildRootPath>` ebilirsiniz.
  - question: >
      temel alarak `<OutputPath>` / `<IntermediateOutputPath>` koşullu olarak geçersiz `<BaseOutputPath>` /  `<BaseIntermediateOutputPath>` kılma.
    answer: >
      > [!NOTE]

      > Bu yaklaşımı kullanmak için her projenin birbirinden bağımsız olarak derlemesi gerekir. Derleme sırasında başka bir projeden bir proje başvuru yapıtları yok. Çalışma zamanı sırasında başka bir projeden derlemeleri dinamik olarak yüklemek için bir projeniz yoktur (örneğin `Assembly.Loadfile("..\..\Project2\Release\Project2.dll")` çağrısı).


      Derleme sırasında Live Unit Testing yapıtlar `<BaseOutputPath>` / `<BaseIntermediateOutputPath>` klasörünü hedeflemek için değişkenleri Live Unit Testing geçersiz kılar.


      Örneğin, derlemeniz aşağıda gösterildiği gibi <OutputPath> geçersiz kılarsa:


      ```xml

      <Project>
        <PropertyGroup>
          <OutputPath>$(SolutionDir)Artifacts\$(Configuration)\bin\$(MSBuildProjectName)</OutputPath>
        </PropertyGroup>
      </Project>

      ```


      daha sonra bunu aşağıdaki XML ile değiştirebilirsiniz:


      ```xml

      <Project>
        <PropertyGroup>
          <BaseOutputPath Condition="'$(BaseOutputPath)' == ''">$(SolutionDir)Artifacts\$(Configuration)\bin\$(MSBuildProjectName)\</BaseOutputPath>
          <OutputPath Condition="'$(OutputPath)' == ''">$(BaseOutputPath)</OutputPath>
        </PropertyGroup>
      </Project>

      ```


      Bu, klasörün `<OutputPath>` içinde yer alan bir özellik `<BaseOutputPath>` sağlar.


      Derleme işleminizi `<OutDir>` doğrudan geçersiz kılmayın; derleme `<OutputPath>` yapıtlarını belirli bir konuma bırakmak için geçersiz kılın.
  - question: >
      özelliğine göre özelliklerinizi geçersiz `<LiveUnitTestingBuildRootPath>` kılma.
    answer: >
      > [!NOTE]

      > Bu yaklaşımda, derleme sırasında oluşturulmaz yapıtlar klasörüne eklenen dosyalar konusunda dikkatli olmalısınız. Aşağıdaki örnek, packages klasörünü yapıtların altına yerleştirerek ne yapacaklarını gösterir. Bu klasörün içeriği derleme sırasında oluşturulmay olduğundan, MSBuild **özelliği değiştirilemez.**


      Derleme sırasında Live Unit Testing, `<LiveUnitTestingBuildRootPath>` yapıtlar klasörünün Live Unit Testing ayarlanır.


      Örneğin, projenizin burada gösterilen yapıya sahip olduğunu varsayalım.


      ```

      .vs\...\lut\0\b

      artifacts\{binlog,obj,bin,nupkg,testresults,packages}

      src\{proj1,proj2,proj3}

      tests\{testproj1,testproj2}

      Solution.sln

      ```

      Derleme Live Unit Testing özelliği tam `<LiveUnitTestingBuildRootPath>` yoluna `.vs\...\lut\0\b` ayarlanır. Proje çözüm `<ArtifactsRoot>` dir'ine eşlene özelliği tanımlanıyorsa, MSBuild güncelleştirebilirsiniz:


      ```xml

      <Project>
          <PropertyGroup Condition="'$(LiveUnitTestingBuildRootPath)' == ''">
              <SolutionDir>$([MSBuild]::GetDirectoryNameOfFileAbove(`$(MSBuildProjectDirectory)`, `YOUR_SOLUTION_NAME.sln`))\</SolutionDir>

              <ArtifactsRoot>Artifacts\</ArtifactsRoot>
              <ArtifactsRoot Condition="'$(LiveUnitTestingBuildRootPath)' != ''">$(LiveUnitTestingBuildRootPath)</ArtifactsRoot>
          </PropertyGroup>

          <PropertyGroup>
              <BinLogPath>$(ArtifactsRoot)\BinLog</BinLogPath>
              <ObjPath>$(ArtifactsRoot)\Obj</ObjPath>
              <BinPath>$(ArtifactsRoot)\Bin</BinPath>
              <NupkgPath>$(ArtifactsRoot)\Nupkg</NupkgPath>
              <TestResultsPath>$(ArtifactsRoot)\TestResults</TestResultsPath>

              <!-- Note: Given that a build doesn't generate packages, the path should be relative to the solution dir, rather than artifacts root, which will change during a Live Unit Testing build. -->
              <PackagesPath>$(SolutionDir)\artifacts\packages</PackagesPath>
          </PropertyGroup>
      </Project>

      ```
- name: Yapıt konumu oluşturma
  questions:
  - question: >
      Bir derlemenin yapıtlarının .vs Live Unit Testing yerine belirli bir konuma gitmelerini istiyorum. Bunu nasıl değiştirebilirim?
    answer: >
      Kullanıcı `LiveUnitTesting_BuildRoot` düzeyinde ortam değişkenlerini, derleme yapıtlarını Live Unit Testing yola ayarlayın. 
- name: Test Gezgini ve Live Unit Testing
  questions:
  - question: >
      Test Gezgini penceresinden test çalıştırmanın, testlerin testlerde çalıştırıla Live Unit Testing?
    answer: >
      Birkaç farklılık vardır:


      - Test Gezgini penceresinden testleri **çalıştırma** veya hata ayıklama normal ikililer çalıştırırken, Live Unit Testing ikililer çalıştırır. Araçlı ikili dosyalarda hata ayıklamak istemiyorsanız, test yönteminize [bir Debugger.Launch](xref:System.Diagnostics.Debugger.Launch)yöntemi çağrısı eklemek, bu yöntem her yürütülürken (Live Unit Testing tarafından yürütülürken dahil) hata ayıklayıcının başlatılmasına neden olur ve ardından, araçlı ikili dosyayı iliştirerek ve hata ayıklamasını   gerçekleştirebilirsiniz. Ancak, çoğu kullanıcı senaryosunda ölçüm ölçümenin sizin için saydam olduğunu ve araçlı ikili dosyalarda hata ayıklamaya gerek olmadığını umuyoruz.


      - Live Unit Testing testleri çalıştırmak için yeni bir uygulama etki alanı oluşturmaz, ancak **Test** Gezgini penceresinden çalıştırilen testler yeni bir uygulama etki alanı oluşturabilir.


      - Live Unit Testing her test derlemesinde testleri sırayla çalıştırır. Test **Gezgini'nde** birden çok testi paralel olarak çalıştırmayı seçebilirsiniz.


      - **Test Gezgini** testleri varsayılan olarak tek iş parçacıklı bir kanalda (STA) çalıştırırken, Live Unit Testing iş parçacıklı bir kanalda (MTA) testler çalıştırır. Live Unit Testing'da STA'da MSTest testleri çalıştırmak için, test yöntemini veya içeren sınıfı, NuGet paketinde bulunan `<STATestMethod>` `<STATestClass>` veya `MSTest.STAExtensions 1.0.3-beta` özniteliğiyle NuGet. NUnit için, test yöntemini özniteliğiyle `<RequiresThread(ApartmentState.STA)>` ve xUnit için özniteliğiyle dekore `<STAFact>` et.
- name: Testleri hariç tut
  questions:
  - question: >
      Nasıl yaparım? katılan testleri dışlamak Live Unit Testing?
    answer: >
      Kullanıcıya özgü ayar için bu makaledeki Use [Live Unit Testing](live-unit-testing.md#include-and-exclude-test-projects-and-test-methods) (Test projelerini ve test Visual Studio dahil edin ve hariç tut) bölümüne bakın. Belirli bir düzenleme oturumu için belirli bir test kümesi çalıştırmak veya kendi kişisel tercihlerinizi kalıcı yapmak istediğiniz zaman testleri dahil etmek veya hariç tutarak yararlı olur.


      Çözüme özgü ayarlar için, yöntemleri, özellikleri, sınıfları veya yapıları dışlamak için özniteliğini program aracılığıyla uygulayabilirsiniz ve bu öznitelikler tarafından <xref:System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute?displayProperty=fullName> Live Unit Testing. Ayrıca, proje dosyanız içinde özelliğini olarak `<ExcludeFromCodeCoverage>` `true` ayararak projenin tamamının takipten dışlandırabilirsiniz. Live Unit Testing, yine de göstergede yer alan testleri çalıştıracak ancak kapsamları görselleştirilemayacak.


      Ayrıca geçerli uygulama etki alanında yüklü olup olmadığını kontrol edip nedene bağlı `Microsoft.CodeAnalysis.LiveUnitTesting.Runtime` olarak testleri devre dışı abilirsiniz. Örneğin, xUnit ile aşağıdakine benzer bir şey yapabilirsiniz:


      ```csharp

      [ExcludeFromCodeCoverage]

      public class SkipLiveFactAttribute : FactAttribute

      {
         private static bool s_lutRuntimeLoaded = AppDomain.CurrentDomain.GetAssemblies().Any(a => a.GetName().Name ==
                                                  "Microsoft.CodeAnalysis.LiveUnitTesting.Runtime");
         public override string Skip => s_lutRuntimeLoaded ? "Test excluded from Live Unit Testing" : "";
      }


      public class Class1

      {
         [SkipLiveFact]
         public void F()
         {
            Assert.True(true);
         }
      }

      ```
- name: Sürekli derlemeler
  questions:
  - question: >
      Düzenleme yapmamama rağmen Canlı Birim testi neden sürekli çözüm derleyeme devam ediyor?
    answer: >
      Derleme işlemi çözümün kendi parçası olan kaynak kodu oluştursa ve derleme hedef dosyalarında uygun giriş ve çıkışlar belirtilmemişse bile çözümünüz derlemenize yardımcı olabilir. Hedeflere girişlerin ve çıkışların bir listesinin verilmesi gerekir, böylece MSBuild uygun güncel denetimleri gerçekleştirip yeni bir derleme gerekip gerek olmadığını belirleyene kadar.


      Live Unit Testing dosyaların değiştiğini algılayan her derlemeyi başlatır. Çözüm derlemesi kaynak dosyaları oluştura olduğundan, Live Unit Testing sonsuz derleme döngüsüne girebilirsiniz. Ancak, Live Unit Testing ikinci derlemeyi başlatırken (önceki derlemeden yeni oluşturulan kaynak dosyaları algıladikten sonra) hedefin girişleri ve çıkışları denetlenirse, giriş ve çıkış denetimleri her şeyin güncel olduğunu işaret eder çünkü derleme döngüsünden çıkar.
- name: Düzenleyici simgeleri
  questions:
  - question: >
      Çıkış penceresindeki iletilere göre testleri çalıştırmış Live Unit Testing neden düzenleyicide herhangi bir simge göremiyorum?
    answer: >
      Üzerinde çalışan derlemeler herhangi bir nedenle Live Unit Testing düzenleyicide simge görmeyebilirsiniz. Örneğin, Live Unit Testing ayara sahip projelerle uyumlu `<UseHostCompilerIfAvailable>false</UseHostCompilerIfAvailable>` değildir. Bu durumda, derleme işleminizin bu ayarı kaldıracak şekilde güncelleştirilmiş olması veya bu ayarın çalışması `true` için Live Unit Testing gerekir. 
- name: Günlükleri yakalama
  questions:
  - question: >
      Nasıl yaparım? raporlarına daha ayrıntılı günlükler mi toplayabilirsiniz?
    answer: >
      Daha ayrıntılı günlükler toplamak için birkaç şey yapabiliriz:


      - Araçlar **Seçenekler'e**  >    >  **Live Unit Testing** ve günlüğe kaydetme seçeneğini Ayrıntılı **olarak ayarlayın.** Ayrıntılı günlük kaydı, Çıkış penceresinde daha ayrıntılı günlükler gösterilmeye **neden** olur.


      - Kullanıcı `LiveUnitTesting_BuildLog` ortamı değişkenlerini günlük kaydında yakalamak için kullanmak istediğiniz dosyanın MSBuild ayarlayın. Derleme MSBuild ayrıntılı günlük Live Unit Testing bu dosyadan alabilirsiniz.


      - Test Platformu `LiveUnitTesting_TestPlatformLog` günlüğünü yakalamak için kullanıcı ortam `1` değişkenini olarak ayarlayın. Daha sonra, Live Unit Testing ayrıntılı Test Platformu günlük iletileri'den `[Solution Root]\.vs\[Solution Name]\log\[VisualStudio Process ID]` alınabilirsiniz.


      - adlı kullanıcı düzeyinde bir ortam değişkeni oluşturun ve 1 (veya herhangi bir değer) olarak ayarlayın ve bu değişkeni `VS_UTE_DIAGNOSTICS` Visual Studio. Şimdi çıkışta çıkış - testler sekmesinde **çok fazla** günlük kaydı Visual Studio.
additionalContent: "\n## <a name=\"see-also\"></a>Ayrıca bkz.\n   - [Live Unit Testing](live-unit-testing.md)"
