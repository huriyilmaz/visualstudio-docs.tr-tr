### YamlMime:FAQ
metadata:
  title: EditorConfig ile çözümleyiciler karşılaştırması
  ms.date: 03/11/2019
  description: .NET Compiler Platform tabanlı kod analizi hakkında Visual Studio. EditorConfig dosyaları, kural kümeleri ve diğer konularla ilgili soruların yanıtlarına bakın.
  ms.custom: SEO-VS-2020
  ms.topic: conceptual
  helpviewer_keywords:
  - analyzers, faq
  author: mikejo5000
  ms.author: mikejo
  manager: jmartens
  ms.workload:
  - multiple
  ms.openlocfilehash: a9ff57daf22d61758b3bbc7d99beb6d2555b7e18
  ms.sourcegitcommit: b12a38744db371d2894769ecf305585f9577792f
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 09/13/2021
  ms.locfileid: "126632985"
title: Kod analizi hakkında SSS
summary: Bu sayfa, .NET Compiler Platform tabanlı kod analizi hakkında sık sorulan soruların yanıtlarını Visual Studio.
sections:
- name: Kod analizi ve EditorConfig karşılaştırması
  questions:
  - question: >
      Kod stilini kontrol etmek için kod analizini veya EditorConfig'i kullanmalı musunuz?
    answer: >
      Kod analizi ve EditorConfig dosyaları el ile çalışır. Kod stillerini [editorConfig](/dotnet/fundamentals/code-analysis/code-style-rule-options) dosyasında veya metin düzenleyicisi [Seçenekler](../ide/code-styles-and-code-cleanup.md) sayfasında tanımladığınız zaman, kod çözümleyicilerini Visual Studio. EditorConfig dosyaları çözümleyici kurallarını etkinleştirmek veya devre dışı bırakmak ve çözümleyici paketlerini yapılandırmak NuGet kullanılabilir.
- name: EditorConfig ve kural kümeleri karşılaştırması
  questions:
  - question: >
      Çözümleyicilerimi bir kural kümesi veya EditorConfig dosyası kullanarak yapılandırmam gerekir mi?
    answer: >
      Kural kümeleri ve EditorConfig dosyaları birlikte kullanılabilir ve çözümleyicileri yapılandırmak için kullanılabilir. EditorConfig dosyaları ve kural kümeleri, kuralları etkinleştirmeniz, devre dışı bırakmanız ve bunların önem derecesini ayarlamanızı sağlar.


      Ancak EditorConfig dosyaları, kuralları yapılandırmak için de ek yollar sağlar:


      - .NET kod kalitesi çözümleyicileri için EditorConfig dosyaları, analiz etmeniz gereken [kod türlerini tanımlamanıza izin sağlar.](/dotnet/fundamentals/code-analysis/code-quality-rule-options)

      - düzenleyicide yerleşik olarak yer alan .NET kod stili çözümleyicileri Visual Studio EditorConfig dosyaları, bir kod temeli için tercih edilen [kod](/dotnet/fundamentals/code-analysis/code-style-rule-options) stillerini tanımlamanıza izin sağlar.


      Kural kümeleri ve EditorConfig dosyalarına ek olarak, bazı çözümleyiciler C# ve VB derleyicileri için ek dosya olarak işaretlenmiş metin dosyalarının kullanımıyla yapılandırılır. [](../ide/build-actions.md#build-action-values)


      > [!NOTE]

      > - EditorConfig dosyaları yalnızca kuralları etkinleştirmek ve önem derecelerini 2019 Visual Studio 16.3 ve sonraki sürümlerde ayarlamak için kullanılabilir.

      > - EditorConfig dosyaları eski analizi yapılandırmak için kullanılamazken kural kümeleri kullanılabilir.
- name: CI derlemeleri içinde kod analizi
  questions:
  - question: >
      Sürekli .NET Compiler Platform (CI) derlemeleri üzerinde çalışma yapmak için .NET Compiler Platform tabanlı kod analizi çalışıyor mu?
    answer: >
      Evet. Bir NuGet paketinden yüklenmiş çözümleyiciler için, bu [](roslyn-analyzers-overview.md#build-errors)kurallar CI derlemesi sırasında dahil olmak üzere derleme zamanında uygulanır. CI derlemesinde kullanılan çözümleyiciler, hem kural kümelerinden hem de EditorConfig dosyalarından kural yapılandırmasına saygı gösterir. Şu anda, Visual Studio yerleşik kod çözümleyicileri bir NuGet paketi olarak kullanılamaz ve bu nedenle bu kurallar CI derlemesinde zorlanmaz.
- name: IDE çözümleyicileri ile StyleCop karşılaştırması
  questions:
  - question: >
      IDE kod çözümleyicileri Visual Studio StyleCop çözümleyicileri arasındaki fark nedir?
    answer: >
      IDE Visual Studio hem kod stili hem de kalite sorunlarını bulan yerleşik çözümleyicileri içerir. Bu kurallar, yeni dil özelliklerini kullanmaya ve kodunuzun bakımını geliştirmenize yardımcı olur. IDE çözümleyicileri her bir sürümle Visual Studio güncelleştirilir.


      [StyleCop çözümleyicileri,](https://github.com/DotNetAnalyzers/StyleCopAnalyzers) kodda stil tutarlılığını NuGet bir paket olarak yüklenmiş üçüncü taraf çözümleyicileridir. Genel olarak, StyleCop kuralları bir kod tabanı için bir stili diğerine önermeden kişisel tercihler ayarlamanızı sağlar.
- name: Kod çözümleyicileri ile eski analiz karşılaştırması
  questions:
  - question: >
      Eski analizle .NET Compiler Platform arasındaki fark nedir?
    answer: >
      .NET Compiler Platform tabanlı kod analizi, kaynak kodu gerçek zamanlı olarak ve derleme sırasında analiz ederken, eski analiz derleme tamamlandıktan sonra ikili dosyaları analiz eder. Daha fazla bilgi için [bkz. .NET Compiler Platform tabanlı analiz ile eski analiz karşılaştırması.](../code-quality/net-analyzers-faq.yml#what-s-the-difference-between-legacy-fxcop-and--net-analyzers-)
- name: FxCop çözümleyicileri ile .NET çözümleyicileri karşılaştırması
  questions:
  - question: >
      FxCop çözümleyicileri ile .NET çözümleyicileri arasındaki fark nedir?
    answer: >
      FxCop çözümleyicileri ve .NET çözümleyicileri, FxCop CA kurallarının .NET Compiler Platform ("Roslyn") çözümleyicisi uygulamalarına başvurur. 2019 16.8 ve .NET 5.0 Visual Studio önce, bu çözümleyiciler NuGet `Microsoft.CodeAnalysis.FxCopAnalyzers` [olarak gönderildi.](https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers) 2019 Visual Studio 16.8 ve .NET 5.0'dan başlayarak, bu çözümleyiciler [.NET SDK'sı ile birlikte gelir.](/dotnet/fundamentals/code-analysis/overview) Bunlar, bir paket `Microsoft.CodeAnalysis.NetAnalyzers` [NuGet kullanılabilir.](https://www.nuget.org/packages/Microsoft.CodeAnalysis.NetAnalyzers) Lütfen [FxCop çözümleyicilerinden .NET çözümleyicileri'ne kullanmayı göz önünde bulundurarak.](migrate-from-fxcop-analyzers-to-net-analyzers.md)
- name: Uyarıları hata olarak davran
  questions:
  - question: >
      Projem uyarıları hata olarak düzeltmek için derleme seçeneğini kullanıyor. Eski analizden kaynak kod analizine bir süre sonra tüm kod analizi uyarıları artık hata olarak görünüyor. Bunu nasıl önlenebilirim?
    answer: >
      Kod analizi uyarılarının hata olarak kabul önlenmesi için şu adımları izleyin:

        1. Aşağıdaki içeriğe sahip bir .props dosyası oluşturun:

           ```xml
           <Project>
              <PropertyGroup>
                 <CodeAnalysisTreatWarningsAsErrors>false</CodeAnalysisTreatWarningsAsErrors>
              </PropertyGroup>
           </Project>
           ```

        2. Önceki adımda oluşturduğunuz .props dosyasını içeri aktaracak .csproj veya .vbproj proje dosyanıza bir satır ekleyin. Bu satır, çözümleyici .props dosyalarını içeri aktaran satırlardan önce yerleştirilmalıdır. Örneğin, .props dosyanız codeanalysis.props olarak adlandırılmışsa:

           ```xml
           ...
           <Import Project="..\..\codeanalysis.props" Condition="Exists('..\..\codeanalysis.props')" />
           <Import Project="..\packages\Microsoft.CodeAnalysis.NetAnalyzers.5.0.0\build\Microsoft.CodeAnalysis.NetAnalyzers.props" Condition="Exists('..\packages\Microsoft.CodeAnalysis.NetAnalyzers.5.0.0\build\Microsoft.CodeAnalysis.NetAnalyzers.props')" />
           ...
           ```
- name: Kod analizi çözümü özellik sayfası
  questions:
  - question: >
      Çözümün Code Analysis özelliği sayfası nerede?
    answer: >
      Çözüm Code Analysis özellik sayfası, daha güvenilir paylaşılan özellik grubu için kaldırıldı. Proje düzeyinde Code Analysis için, Code Analysis özellik sayfası hala kullanılabilir. (Yönetilen projeler için kural yapılandırma için kural kümeleri'den EditorConfig'e de öneririz.)  Bir çözüm veya bir repo içinde birden çok/tüm projelerde kural kümeleri paylaşmak için, paylaşılan bir props/targets dosyasında veya *Directory.props/Directory.targets* dosyasında [CodeAnalysisRuleSet](../code-quality/using-rule-sets-to-group-code-analysis-rules.md#specify-a-rule-set-for-a-project) özelliğine sahip bir özellik grubu tanımlamanız önerilir. Tüm projelerinizi içeri aktaracak böyle bir ortak teklifiniz veya hedefiniz yoksa, böyle bir özellik grubunu dizinde veya onun alt dizinlerinde tanımlanan tüm proje dosyalarında otomatik olarak içeri aktarılan bir üst düzey çözüm dizininde [Directory.props veya Directory.targets](../msbuild/customize-your-build.md) dosyasına eklemeyi düşünebilirsiniz.
additionalContent: "\n## <a name=\"see-also\"></a>Ayrıca bkz.\n   - [Çözümleyicilere genel bakış](roslyn-analyzers-overview.md)\n   - [EditorConfig için .NET kodlama kuralı ayarları](/dotnet/fundamentals/code-analysis/code-style-rule-options)"
