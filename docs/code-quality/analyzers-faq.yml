### YamlMime:FAQ
metadata:
  title: EditorConfig ve çözümleyiciler karşılaştırması
  ms.date: 10/05/2021
  description: .NET Compiler Platform tabanlı kod analizi hakkında bilgi Visual Studio. EditorConfig dosyaları, kural kümeleri ve diğer konularla ilgili soruların yanıtlarına bakın.
  ms.custom: SEO-VS-2020
  ms.topic: conceptual
  helpviewer_keywords:
  - analyzers, faq
  author: mikejo5000
  ms.author: mikejo
  manager: jmartens
  ms.workload:
  - multiple
  ms.openlocfilehash: 6e93f704bc792f2c8eb3b0ede8d12e8274ea0d45
  ms.sourcegitcommit: d63ba1eff845d41ca095efb14b499ea96c4b6eba
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 10/06/2021
  ms.locfileid: "129561093"
title: Visual Studio'de kod analizi hakkında SSS
summary: Bu sayfa, verilerde kod tabanlı kod analizi hakkında .NET Compiler Platform sık sorulan soruların yanıtlarını Visual Studio.
sections:
- name: Kod analizi ve EditorConfig karşılaştırması
  questions:
  - question: >
      Kod stilini kontrol etmek için kod analizini veya EditorConfig'i kullanmalı musunuz?
    answer: >
      Kod analizi ve EditorConfig dosyaları el ile çalışır. Kod stillerini [bir EditorConfig](/dotnet/fundamentals/code-analysis/code-style-rule-options) dosyasında veya metin düzenleyicisi [Seçenekler](../ide/code-styles-and-code-cleanup.md) sayfasında tanımladığınız zaman, kod çözümleyicilerini Visual Studio. EditorConfig dosyaları çözümleyici kurallarını etkinleştirmek veya devre dışı bırakmak ve çözümleyici paketlerini yapılandırmak NuGet kullanılabilir.
- name: EditorConfig ve kural kümeleri karşılaştırması
  questions:
  - question: >
      Çözümleyicilerimi bir kural kümesi veya EditorConfig dosyası kullanarak yapılandırmam gerekir mi?
    answer: >
      Kural kümeleri ve EditorConfig dosyaları birlikte kullanılabilir ve çözümleyicileri yapılandırmak için kullanılabilir. EditorConfig dosyaları ve kural kümeleri, kuralları etkinleştirmeniz, devre dışı bırakmanız ve bunların önem derecesini ayarlamanızı sağlar.


      Ancak EditorConfig dosyaları, kuralları yapılandırmak için de ek yollar sağlar:


      - .NET kod kalitesi çözümleyicileri için EditorConfig dosyaları, analiz etmeniz gereken [kod türlerini tanımlamanıza izin sağlar.](/dotnet/fundamentals/code-analysis/code-quality-rule-options)

      - DüzenleyiciConfig dosyaları, yerleşik olarak yerleşik olarak Visual Studio .NET kod stili çözümleyicileri için bir kod temeli için tercih edilen kod [stillerini](/dotnet/fundamentals/code-analysis/code-style-rule-options) tanımlamaya izin sağlar.


      Kural kümeleri ve EditorConfig dosyalarına ek olarak, bazı çözümleyiciler C# ve VB derleyicileri için ek dosya olarak işaretlenmiş metin dosyalarının kullanımıyla yapılandırılır. [](../ide/build-actions.md#build-action-values)


      > [!NOTE]

      > - EditorConfig dosyaları yalnızca kuralları etkinleştirmek ve önem derecelerini 2019 Visual Studio 16.3 ve sonraki sürümlerde ayarlamak için kullanılabilir.

      > - EditorConfig dosyaları eski analizi yapılandırmak için kullanılamazken kural kümeleri kullanılabilir.
- name: CI derlemeleri içinde kod analizi
  questions:
  - question: >
      Bu .NET Compiler Platform tabanlı kod analizi sürekli tümleştirme (CI) derlemeleri üzerinde çalışıyor mu?
    answer: >
      Evet. Bir NuGet paketinden yüklenmiş çözümleyiciler için, bu [](roslyn-analyzers-overview.md#build-errors)kurallar CI derlemesi sırasında dahil olmak üzere derleme zamanında uygulanır. CI derlemesinde kullanılan çözümleyiciler, hem kural kümelerinden hem de EditorConfig dosyalarından kural yapılandırmasına saygı gösterir. Şu anda, Visual Studio yerleşik kod çözümleyicileri bir NuGet paketi olarak kullanılamaz ve bu nedenle bu kurallar CI derlemesinde zorlanmaz.
- name: IDE çözümleyicileri ile StyleCop karşılaştırması
  questions:
  - question: >
      IDE kod çözümleyicileri Visual Studio StyleCop çözümleyicileri arasındaki fark nedir?
    answer: >
      IDE Visual Studio hem kod stili hem de kalite sorunlarını bulan yerleşik çözümleyicileri içerir. Bu kurallar, yeni dil özelliklerini kullanmaya ve kodunuzun bakımını geliştirmenize yardımcı olur. IDE çözümleyicileri her bir sürümle Visual Studio güncelleştirilir.


      [StyleCop çözümleyicileri,](https://github.com/DotNetAnalyzers/StyleCopAnalyzers) kodda stil tutarlılığını NuGet bir paket olarak yüklenmiş üçüncü taraf çözümleyicileridir. Genel olarak, StyleCop kuralları bir kod tabanı için bir stili diğerine önermeden kişisel tercihler ayarlamanızı sağlar.
- name: Kod çözümleyicileri ile eski analiz karşılaştırması
  questions:
  - question: >
      Eski analiz ile .NET Compiler Platform tabanlı kod analizi arasındaki fark nedir?
    answer: >
      .NET Compiler Platform tabanlı kod analizi, kaynak kodu gerçek zamanlı olarak ve derleme sırasında analiz ederken, eski analiz derleme tamamlandıktan sonra ikili dosyaları analiz eder. Daha fazla bilgi için [bkz. .NET Compiler Platform tabanlı analiz ile eski analiz karşılaştırması.](../code-quality/net-analyzers-faq.yml#what-s-the-difference-between-legacy-fxcop-and--net-analyzers-)
- name: FxCop çözümleyicileri ile .NET çözümleyicileri karşılaştırması
  questions:
  - question: >
      FxCop çözümleyicileri ile .NET çözümleyicileri arasındaki fark nedir?
    answer: >
      FxCop çözümleyicileri ve .NET çözümleyicileri, FxCop CA kurallarının .NET Compiler Platform ("Roslyn") çözümleyicisi uygulamalarını ifade eder. 2019 Visual Studio 16.8 ve .NET 5.0'dan önce, bu çözümleyiciler NuGet `Microsoft.CodeAnalysis.FxCopAnalyzers` [olarak gönderildi.](https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers) 2019 Visual Studio 16.8 ve .NET 5.0'dan başlayarak, bu çözümleyiciler [.NET SDK'sı ile birlikte gelir.](/dotnet/fundamentals/code-analysis/overview) Bunlar, paket NuGet `Microsoft.CodeAnalysis.NetAnalyzers` [kullanılabilir.](https://www.nuget.org/packages/Microsoft.CodeAnalysis.NetAnalyzers) Lütfen [FxCop çözümleyicilerinden .NET çözümleyicileri'ne kullanmayı göz önünde bulundurarak.](migrate-from-fxcop-analyzers-to-net-analyzers.md)
- name: Uyarıları hata olarak davran
  questions:
  - question: >
      Projem uyarıları hata olarak düzeltmek için derleme seçeneğini kullanıyor. Eski analizden kaynak kod analizine bir süre sonra tüm kod analizi uyarıları artık hata olarak görünüyor. Bunu nasıl önlenebilirim?
    answer: >
      Kod analizi uyarılarının hata olarak kabul önlenmesi için şu adımları izleyin:

        1. Aşağıdaki içeriğe sahip bir .props dosyası oluşturun:

           ```xml
           <Project>
              <PropertyGroup>
                 <CodeAnalysisTreatWarningsAsErrors>false</CodeAnalysisTreatWarningsAsErrors>
              </PropertyGroup>
           </Project>
           ```

        2. Önceki adımda oluşturduğunuz .props dosyasını içeri aktaracak .csproj veya .vbproj proje dosyanıza bir satır ekleyin. Bu satır, çözümleyici .props dosyalarını içeri aktaran satırlardan önce yerleştirilmalıdır. Örneğin, .props dosyanız codeanalysis.props olarak adlandırılmışsa:

           ```xml
           ...
           <Import Project="..\..\codeanalysis.props" Condition="Exists('..\..\codeanalysis.props')" />
           <Import Project="..\packages\Microsoft.CodeAnalysis.NetAnalyzers.5.0.0\build\Microsoft.CodeAnalysis.NetAnalyzers.props" Condition="Exists('..\packages\Microsoft.CodeAnalysis.NetAnalyzers.5.0.0\build\Microsoft.CodeAnalysis.NetAnalyzers.props')" />
           ...
           ```
- name: Kod analizi çözümü özellik sayfası
  questions:
  - question: >
      Çözümün Code Analysis özelliği sayfası nerede?
    answer: >
      Çözüm Code Analysis özellik sayfası, daha güvenilir paylaşılan özellik grubu için kaldırıldı. Proje düzeyinde Code Analysis için Code Analysis özellik sayfası hala kullanılabilir. (Yönetilen projeler için kural yapılandırma için kural kümeleri'den EditorConfig'e de öneririz.)  Bir çözüm veya bir repo içinde birden çok/tüm projelerde kural kümeleri paylaşmak için, paylaşılan bir props/targets dosyasında veya *Directory.props/Directory.targets* dosyasında [CodeAnalysisRuleSet](../code-quality/using-rule-sets-to-group-code-analysis-rules.md#specify-a-rule-set-for-a-project) özelliğine sahip bir özellik grubu tanımlamanız önerilir. Tüm projelerinizi içeri aktaracak böyle bir ortak teklifiniz veya hedefiniz yoksa, böyle bir özellik grubunu dizinde veya onun alt dizinlerinde tanımlanan tüm proje dosyalarında otomatik olarak içeri aktarılan bir üst düzey çözüm dizininde [Directory.props veya Directory.targets](../msbuild/customize-your-build.md) dosyasına eklemeyi düşünebilirsiniz.
additionalContent: "\n## <a name=\"see-also\"></a>Ayrıca bkz.\n   - [Çözümleyicilere genel bakış](roslyn-analyzers-overview.md)\n   - [EditorConfig için .NET kodlama kuralı ayarları](/dotnet/fundamentals/code-analysis/code-style-rule-options)"
